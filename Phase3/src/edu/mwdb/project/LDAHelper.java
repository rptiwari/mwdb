package edu.mwdb.project;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import matlabcontrol.MatlabProxy;
import matlabcontrol.extensions.MatlabNumericArray;
import matlabcontrol.extensions.MatlabTypeConverter;

public class LDAHelper {

	public List<HashMap<String,Float>> doLDA(double[][] docKeywordCorpusMatrix,String[] staticVocabulary) throws Exception{

		MatlabProxy proxy = MatLab.getProxy();
		LDAPrep ldaInputs = new LDAPrep();

		ldaInputs.doLDAPrepFullMatrix(docKeywordCorpusMatrix);
		//ldaInputs.makeDictionaryFile(staticVocabulary);

		double[][] WS = new double[1][ldaInputs.WS.length];
		WS[0] = ldaInputs.WS;
		double[][] DS = new double[1][ldaInputs.DS.length];
		DS[0] = ldaInputs.DS;

		String currentPath = Utility.getCurrentFolder();
		proxy.eval("cd "+currentPath);


		MatlabTypeConverter processor = new MatlabTypeConverter(proxy);

		processor.setNumericArray("WS", new MatlabNumericArray(WS, null));
		processor.setNumericArray("DS", new MatlabNumericArray(DS, null));

		/* set the number of latent semantics to retrieve */
		double T = 5.0;
		proxy.setVariable("T", 5);
		proxy.setVariable("WO", staticVocabulary);
		proxy.eval("[WPALL,DPALL,ZALL] = LDA1(WS,DS,T,WO)");

		double[][] WP = processor.getNumericArray("WPALL").getRealArray2D();
		double[][] DP = processor.getNumericArray("DPALL").getRealArray2D();
		double[][] Z = processor.getNumericArray("ZALL").getRealArray2D();

		//Do processing of Topics probability Matrix generated by matlab in text file to display top k topics

		/* numImportantTopics = T,  numRelevantWords = 7 + 1 for header */
		String filename = currentPath + "/" + "topics.txt";
		//				 List<KeywordConfig>[] topicsconfigList = ldaInputs.readLDATopics( filename,  5, 8);
		List<KeywordData>[] topicsconfigList = ldaInputs.readPrintTopics(filename, 5,8);
		
		/* for consistency convert to list of HashMap */
		List<HashMap<String,Float>> topicsList = new ArrayList<HashMap<String,Float>>();
		for(List<KeywordData> aTopic : topicsconfigList){
			HashMap<String,Float> topicFreq = new HashMap<String,Float>(aTopic.size());
				for(KeywordData term : aTopic){
					String item = term.getKeyword();
					Float  freq = term.getWeightedFreq();
					topicFreq.put(item,freq);
			}
			topicsList.add(topicFreq);
		}

		return topicsList;

	}
	
	
}
